////
/// Mixin - Buttons
////

/// Standard button mixin
/// @param {String} $button-key - the key in the $buttons map to use from config
//      ['solid-dark' 'solid-light', 'outline-dark', 'outline-light', 'promo']
/// @param {String} $size - button size ['small', 'medium', 'large']
// ex:
//   @include btn(outline-dark);
//   @include btn(solid-dark, large);
@mixin btn($button-key, $size: medium) {
  align-items: center;
  border-radius: 3rem;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-flex;
  font-size: var(--btn-fs);
  font-weight: var(--fw-normal);
  justify-content: center;
  letter-spacing: -0.01em;
  line-height: 1.4;
  padding: var(--btn-padding);
  position: relative;
  text-decoration: none;
  transition: all var(--trt-3) ease;
  white-space: nowrap;

  @include btn-size($size);
  @include btn-style($button-key);

  // Disabled
  &:disabled,
  &.btn--disabled {
    pointer-events: none;
  }
}

/// Mixin to change the button style.
/// @param {String} $button-key - the key in the $buttons map to use from config
//      ['solid-dark' 'solid-light', 'outline-dark', 'outline-light', 'promo']
@mixin btn-style($button-name) {
  $button-key: $button-name;
  
  // Replace legacy names with new names.
  // @todo: Remove once there are no more instances on the site.
  @if $button-name == 'primary' {
    $button-key: 'outline-dark';
  } @else if $button-name == 'primary-filled' {
    $button-key: 'solid-dark';
  } @else if $button-name == 'dark' {
    $button-key: 'outline-light';
  } @else if $button-name == 'dark-filled' {
    $button-key: 'solid-light';
  }

  $button: map.get($buttons, $button-key);

  @each $prop, $value in $button {
    @if $prop != 'selectors' {
      #{$prop}: #{$value};

      @if $prop == 'color' {
        --btn-text-color: #{$value};
      }
    }
  }

  @if map.has-key($button, 'selectors') {
    $selectors: map.get($button, 'selectors');

    @each $selector, $selector_props in $selectors {
      &:#{$selector} {
        @each $prop, $value in $selector_props {
          #{$prop}: #{$value};

          @if $prop == 'color' {
            --btn-text-color: #{$value};
          }
        }
      }

      // Disabled class
      @if $selector == 'disabled' {
        &.btn--disabled {
          @each $prop, $value in $selector_props {
            #{$prop}: #{$value};
          }
        }
      }
    }
  }
}

/// Mixin to change the button size.
/// @param {String} $size - button size ['small', 'medium', 'large']
@mixin btn-size($size) {
  @if  $size == large {
    --btn-fs: 1rem;
    --btn-padding: 0.75rem 1.75rem;
  } @else if $size == medium {
    --btn-fs: 0.875rem;
    --btn-padding: 0.5rem 1.5rem;
  } @else if $size == small {
    --btn-fs: 0.75rem;
    --btn-padding: 0.375rem 1rem;
  }
}

/// Button play icon mixin
@mixin btn-play-icon {
  gap: 0.375rem;
  width: fit-content;

  &::after {
    align-items: center;
    border: 1px solid var(--btn-text-color);
    border-radius: 50%;
    color: var(--btn-text-color);
    content: '';
    display: inline-flex;
    font-size: rem-calc(10);
    height: 1rem;
    justify-content: center;
    width: 1rem;
  }

  @include icon-after(play);
}
