////
/// Mixin - Buttons
////

/// Standard button mixin
/// @param {String} $button-key - the key in the $buttons map to use from config
//      ['solid-dark' 'solid-light', 'outline-dark', 'outline-light', 'promo', 'promo-alt', 'eclipse']
/// @param {String} $size - button size ['small', 'medium', 'large']
/// @param {String} $icon - optional icon ['play']
// ex:
//   @include btn(outline-dark, large);
//   @include btn(solid-dark, large);
@mixin btn($button-key, $size: medium, $icon: '') {
  border-radius: 3rem;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-size: var(--btn-fs);
  font-weight: var(--fw-normal);
  letter-spacing: -0.01em;
  line-height: 1.4;
  padding: var(--btn-padding);
  position: relative;
  text-decoration: none;
  transition: all var(--trt-3) ease;
  white-space: nowrap;

  @include btn-size($size);
  @include btn-style($button-key);

  // Disabled
  &:disabled,
  &.btn--disabled {
    pointer-events: none;
  }

  // Play Icon
  @if $icon == 'play' {
    @include btn-play-icon;
  }
}

/// Mixin to change the button style.
/// @param {String} $button-key - the key in the $buttons map to use from config
@mixin btn-style($button-key) {
  $button: map.get($buttons, $button-key);

  @each $prop, $value in $button {
    @if $prop != 'selectors' {
      #{$prop}: #{$value};
    }
  }

  @if map.has-key($button, 'selectors') {
    $selectors: map.get($button, 'selectors');

    @each $selector, $selector_props in $selectors {
      &:#{$selector} {
        @each $prop, $value in $selector_props {
          #{$prop}: #{$value};
        }
      }

      // Disabled class
      @if $selector == 'disabled' {
        &.btn--disabled {
          @each $prop, $value in $selector_props {
            #{$prop}: #{$value};
          }
        }
      }
    }
  }
}

/// Mixin to change the button size.
/// @param {String} $size [small] - the button size. choose from 'small', 'medium', 'large'
@mixin btn-size($size: medium) {
  @if  $size == large {
    --btn-fs: 1rem;
    --btn-padding: 0.75rem 1.75rem;
  } @else if $size == medium {
    --btn-fs: 0.875rem;
    --btn-padding: 0.5rem 1.25rem;
  } @else if $size == small {
    --btn-fs: 0.75rem;
    --btn-padding: 0.375rem 1rem;
  }
}

/// Buton play icon mixin
@mixin btn-play-icon {
  align-items: center;
  display: inline-flex;
  gap: 0.375rem;
  justify-content: center;
  width: fit-content;

  &::after {
    // $svg: '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none"><circle cx="12" cy="12" r="11.5" fill="white" stroke="#D1CFD7"/><path d="M9.3 15.6C9.22044 15.6 9.14413 15.5684 9.08787 15.5121C9.03161 15.4558 9 15.3795 9 15.3V8.69997C9.00001 8.64784 9.0136 8.59661 9.03944 8.55134C9.06528 8.50606 9.10247 8.46829 9.14735 8.44177C9.19222 8.41524 9.24324 8.40087 9.29536 8.40006C9.34749 8.39925 9.39892 8.41205 9.4446 8.43717L15.4446 11.7372C15.4916 11.7631 15.5309 11.8011 15.5582 11.8473C15.5855 11.8936 15.5999 11.9463 15.5999 12C15.5999 12.0537 15.5855 12.1064 15.5582 12.1526C15.5309 12.1988 15.4916 12.2369 15.4446 12.2628L9.4446 15.5628C9.40031 15.5872 9.35056 15.6 9.3 15.6Z" fill="#181831"/></svg>';
    // background-image: svg-url($svg);
    // content: '';
    color: inherit;
    display: inline-block;
    height: 20px;
    width: 20px;
  }

  @include icon-before(play);
}
